
iterRange = \start stop\ [
  init: start,
  current: \(_),
  next: \state\ if state == stop - 1 then () else (state + 1),
];

iterToArray = \iter\ (
  var arr = [];
  var state = iter.init;
  getCurrent = iter.current;
  getNext = iter.next;
  for _ in range 0 20 do (
    if state == () then (
      return arr;
    )
    set arr |= push (getCurrent state);
    set state |= getNext;
  )
  return arr;
);

iterStep = \var iter n\ (
  next = iter.next;
  set iter.next = \var state\ (
    for _ in range 0 n do (
      set state = next state;
      if state == () then (
        return ();
      )
    )
    return state;
  );
  iter
);

iterMap = \var iter f\ (
  getCurrent = iter.current;
  set iter.current = \state\ f (getCurrent state);
  iter
);

iterRepeat = \iter iterations\ (
  [
    init: [1, iter.init],
    current: \[_, i]\ iter.current i,
    next: \var state\ (
      ![iteration, var innerState] = state;
      set innerState = iter.next innerState;
      if innerState == () then (
        if iteration < iterations then (
          set state.[0] = iteration + 1;
          set state.[1] = iter.init;
          return state;
        ) else (
          return ();
        )
      )
      set state.[1] = innerState;
      state
    )
  ]
);

iter2 = iterRange 1 7
  | iterStep 2
  | iterMap \(0 - _)
  | iterRepeat 2;
print (iterToArray iter2);
