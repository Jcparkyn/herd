
iterRange = \start stop\ {
  init: start,
  current: \(_),
  next: \state\ if state == stop - 1 then () else (state + 1),
};

iterToList = \iter\ (
  var arr = [];
  var state = iter.init;
  getCurrent = iter.current;
  getNext = iter.next;
  while true do (
    if state == () then (
      return arr;
    )
    set arr |= push (getCurrent state);
    set state |= getNext;
  )
  return arr;
);

iterStep = \var iter n\ (
  next = iter.next;
  set iter.next = \var state\ (
    var i = 0;
    while i < n do (
      set state = next state;
      if state == () then (
        return ();
      )
      set i = i + 1;
    )
    return state;
  );
  iter
);

iterMap = \var iter f\ (
  getCurrent = iter.current;
  set iter.current = \state\ f (getCurrent state);
  iter
);

iterRepeat = \iter iterations\ {
  init: [1, iter.init],
  current: \[_, i]\ iter.current i,
  next: \var state\ (
    ![iteration, var innerState] = state;
    set innerState = iter.next innerState;
    if innerState == () then (
      if iteration < iterations then (
        set state.[0] = iteration + 1;
        set state.[1] = iter.init;
        return state;
      ) else (
        return ();
      )
    )
    set state.[1] = innerState;
    state
  )
};

iter2 = iterRange 0 100000000
  | iterMap (\x\ 0 - x)
  | iterRepeat 2
  | iterStep 10000000;
println (iterToList iter2);
