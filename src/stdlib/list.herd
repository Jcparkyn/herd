
!{ range } = import '@basics';
!{ floor, min, clamp } = import '@math';

push = \arr element\ BUILTIN:push arr element;

pop = \arr\ BUILTIN:pop arr;

len = \val\ BUILTIN:len val;

sort = \arr\ BUILTIN:sort arr;

map = \var arr f\ (
  l = len arr;
  for i in range 0 l do (
    set arr.[i] = f arr.[i];
  )
  arr
);

filter = \arr f\ (
  var result = [];
  for item in arr do (
    if f item then (
      set result |= push item;
    )
  )
  result
);

reverse = \var arr\ (
  l = len arr;
  imax = floor (l / 2);
  for i in range 0 imax do (
    i2 = l - 1 - i;
    tmp = arr.[i];
    set arr.[i] = arr.[i2];
    set arr.[i2] = tmp;
  )
  arr
);

slice = \arr start end\ (
  var result = [];
  actualEnd = end | clamp 0 (len arr);
  actualStart = start | clamp 0 (len arr);
  for i in range actualStart actualEnd do (
    set result |= push arr.[i];
  )
  result
);

repeat = \val n\ (
  var result = [];
  for i in range 0 n do (
    set result |= push val;
  )
  result
);

zip = \a b\ (
  var result = [];
  l = min (len a) (len b);
  for i in range 0 l do (
    set result |= push [a.[i], b.[i]];
  )
  result
);

zipWith = \a b f\ (
  var result = [];
  l = min (len a) (len b);
  for i in range 0 l do (
    set result |= push (f a.[i] b.[i]);
  )
  result
);

flatten = \l\ (
  var result = [];
  for sublist in l do (
    for item in sublist do (
      set result |= push item;
    )
  )
  result
);

sum = \l\ (
  var result = 0;
  for item in l do (
    set result = result + item;
  )
  result
);

indexOf = \arr val\ (
  l = len arr;
  for i in range 0 l do (
    if arr.[i] == val then (
      return i;
    )
  )
  -1
);

contains = \arr val\ (indexOf arr val != -1);

all = \arr f\ (
  for item in arr do (
    if BUILTIN:not (f item) then (
      return false;
    )
  )
  true
);

any = \arr f\ (
  for item in arr do (
    if f item then (
      return true;
    )
  )
  false
);

groupBy = \arr f\ (
  var groups = {};
  for item in arr do (
    key = f item;
    existing = groups.[key];
    if existing then (
      set groups.[key] = (); // workaround for unnecessary list clone
      set groups.[key] = existing | push item;
    ) else (
      set groups.[key] = [item];
    )
  )
  groups
);

distinct = \arr\ (
  var seen = {};
  var result = [];
  for item in arr do (
    if BUILTIN:not seen.[item] then (
      set seen.[item] = true;
      set result |= push item;
    )
  )
  result
);

window = \arr n\ (
  var result = [];
  l = len arr;
  if n > l then (
    return [];
  )
  for i in range 0 (l - n + 1) do (
    w = slice arr i (i + n);
    set result |= push w;
  )
  result
);

enumerate = \list\ (
  var result = [];
  l = len list;
  for i in range 0 l do (
    set result |= push [i, list.[i]];
  )
  result
);

return {
  push,
  pop,
  len,
  sort,
  map,
  filter,
  reverse,
  slice,
  repeat,
  zip,
  zipWith,
  flatten,
  sum,
  indexOf,
  contains,
  all,
  any,
  groupBy,
  distinct,
  window,
};
