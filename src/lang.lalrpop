use std::str::FromStr;
use crate::ast::{Expr, Opcode, Statement};

grammar;

pub Statement: Statement = {
    "print" <e:Expr> ";" => Statement::Print(e),
    <name:Identifier> "=" <e:Expr> ";" => Statement::Declaration(name, e),
    <name:Identifier> ":=" <e:Expr> ";" => Statement::Assignment(name, e),
}

NumLiteral: f64 = {
    r"-?[0-9]+" => f64::from_str(<>).unwrap()
};

BoolLiteral: bool = {
    "true" => true,
    "false" => false,
};

Identifier: String = {
    <r"[a-zA-Z]\w*"> => <>.to_string(),
}

Term: Box<Expr> = {
    NumLiteral => Box::new(Expr::Number(<>)),
    BoolLiteral => Box::new(Expr::Bool(<>)),
    Identifier => Box::new(Expr::Variable(<>)),
    "(" <Expr> ")",
};

pub Expr: Box<Expr> = {
    <lhs:Expr> <op:ExprOp> <rhs:Factor> => Box::new(Expr::Op { op, lhs, rhs }),
    Factor,
};

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
    ">" => Opcode::Gt,
    "<" => Opcode::Lt,
    "==" => Opcode::Eq,
    "!=" => Opcode::Neq,
};

Factor: Box<Expr> = {
    <lhs:Factor> <op:FactorOp> <rhs:Term> => Box::new(Expr::Op { op, lhs, rhs }),
    Term,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};