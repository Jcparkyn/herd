use std::{str::FromStr,rc::Rc};
use crate::ast::{Expr, Opcode, Statement, Block, BuiltInFunction};
use crate::parse_helpers::parse_string_literal;

grammar;

pub Program: Vec<Statement> = {
    Statement+
}

pub Statement: Statement = {
    StatementWithSemicolon,
    <ExpressionWithBlock> => Statement::Expression(<>),
}

StatementWithSemicolon: Statement = {
    <ExpressionWithoutBlock> ";" => Statement::Expression(<>),
    <name:Identifier> "=" <e:Expr> ";" => Statement::Declaration(name, e),
    <name:Identifier> ":=" <e:Expr> ";" => Statement::Assignment(name, e),
}

ExpressionWithoutBlock = LogicExpr;
ExpressionWithBlock = {
    IfExpression,
    <BlockExpression> => Box::new(Expr::Block(<>)),
}

IfExpression: Box<Expr> = {
    "if " <cond:Expr> "then" <b1:BlockExpression> <b2:("else" <BlockExpression>)?> => Box::new(
        Expr::If { condition: cond, then_branch: b1, else_branch: b2 }
    )
}

BlockExpression: Block = {
    "{" <b:BlockBody> "}" => b
}

BlockBody: Block = {
    <s:StatementWithSemicolon*> <e:Expr?> => Block { statements: s, expression: e },
}

NumLiteral: f64 = {
    r"-?[0-9]+" => f64::from_str(<>).unwrap()
};

BoolLiteral: bool = {
    "true" => true,
    "false" => false,
};

BuiltInFunction: BuiltInFunction = {
    "print" => BuiltInFunction::Print,
    "not" => BuiltInFunction::Not,
}

LambdaExpression: Box<Expr> = {
    "{" <params:Comma<Identifier>> "->" <body:BlockBody> "}" => Box::new(Expr::Lambda { params, body: Rc::new(body) })
}

DictEntry: (String, Box<Expr>) = {
    <key:Identifier> ":" <val:Expr> => (key, val),
}

DictExpression: Box<Expr> = {
    "[" <entries:Comma<DictEntry>> "]" => Box::new(Expr::Dict(entries)),
}

Identifier: String = {
    <r"[a-zA-Z]\w*"> => <>.to_string(),
}

Term: Box<Expr> = {
    NumLiteral => Box::new(Expr::Number(<>)),
    BoolLiteral => Box::new(Expr::Bool(<>)),
    "nil" => Box::new(Expr::Nil),
    BuiltInFunction => Box::new(Expr::BuiltInFunction(<>)),
    r"'[^']*'" => Box::new(Expr::String(parse_string_literal(<>))),
    Identifier => Box::new(Expr::Variable(<>)),
    "(" <Expr> ")",
    LambdaExpression,
    DictExpression,
};

Tier<Op,NextTier>: Box<Expr> = {
    <lhs:Tier<Op,NextTier>> <op:Op> <rhs:NextTier> => Box::new(Expr::Op { op, lhs, rhs }),
    NextTier
};

CallExpr: Box<Expr> = {
    <callee:Term> <args:Term+> => Box::new(Expr::Call { callee, args }),
}

pub Expr = {
    ExpressionWithoutBlock,
    ExpressionWithBlock,
}

LogicExpr = Tier<LogicOp, ComparisonExpr>;
ComparisonExpr = Tier<ComparisonOp, AddSubCallExpr>;
AddSubCallExpr: Box<Expr> = {
    <lhs:AddSubCallExpr> <op:AddSubOp> <rhs:Factor> => Box::new(Expr::Op { op, lhs, rhs }),
    Factor,
    CallExpr,
}
Factor = Tier<FactorOp, Term>;

LogicOp: Opcode = {
    "and" => Opcode::And,
    "or" => Opcode::Or,
}

ComparisonOp: Opcode = {
    ">" => Opcode::Gt,
    "<" => Opcode::Lt,
    "==" => Opcode::Eq,
    "!=" => Opcode::Neq,
}

AddSubOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};