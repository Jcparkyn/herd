use std::str::FromStr;
use crate::ast::{Expr, Opcode, Statement, Block};

grammar;

pub Statement: Statement = {
    "print" <e:Expr> ";" => Statement::Print(e),
    <Expr> ";" => Statement::Expression(<>),
    <name:Identifier> "=" <e:Expr> ";" => Statement::Declaration(name, e),
    <name:Identifier> ":=" <e:Expr> ";" => Statement::Assignment(name, e),
    IfExpression => Statement::Expression(<>),
}

IfExpression: Box<Expr> = {
    "if " <cond: Expr> <b1:BlockExpression> <b2:ElseClause?> => Box::new(
        Expr::If { condition: cond, then_branch: b1, else_branch: b2 }
    )
}

ElseClause: Block = {
    "else" <BlockExpression> => <>
}

BlockExpression: Block = {
    "{" <s:Statement*> "}" => Block { statements: s },
}

NumLiteral: f64 = {
    r"-?[0-9]+" => f64::from_str(<>).unwrap()
};

BoolLiteral: bool = {
    "true" => true,
    "false" => false,
};

Identifier: String = {
    <r"[a-zA-Z]\w*"> => <>.to_string(),
}

Term: Box<Expr> = {
    NumLiteral => Box::new(Expr::Number(<>)),
    BoolLiteral => Box::new(Expr::Bool(<>)),
    "nil" => Box::new(Expr::Nil),
    Identifier => Box::new(Expr::Variable(<>)),
    "(" <Expr> ")",
    <BlockExpression> => Box::new(Expr::Block(<>)),
};

Tier<Op,NextTier>: Box<Expr> = {
    <lhs:Tier<Op,NextTier>> <op:Op> <rhs:NextTier> => Box::new(Expr::Op { op, lhs, rhs }),
    NextTier
};

pub Expr = Tier<ComparisonOp, Expr2>;
Expr2 = Tier<ExprOp, Factor>;
Factor = Tier<FactorOp, Term>;

ComparisonOp: Opcode = {
    ">" => Opcode::Gt,
    "<" => Opcode::Lt,
    "==" => Opcode::Eq,
    "!=" => Opcode::Neq,
}

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};