
iterRange = \start stop\ {
  init: start,
  current: \(_),
  next: \state\ if state == stop - 1 then () else (state + 1),
};

iterToList = \{init, current, next}\ (
  var arr = [];
  var state = init;
  while true do (
    if state == () then (
      return arr;
    )
    set arr |= push (current state);
    set state |= next;
  )
  return arr;
);

iterStep = \var iter n\ (
  next = iter.next;
  stepNext = \var state\ (
    var i = 0;
    while i < n do (
      set state = next state;
      if state == () then (
        return ();
      )
      set i = i + 1;
    )
    return state;
  );
  set iter.next = stepNext;
  iter
);

iterMap = \var iter f\ (
  getCurrent = iter.current;
  set iter.current = \state\ f (getCurrent state);
  iter
);

iterRepeat = \{init, current, next} iterations\ (
  repeatNext = \var state\ (
    ![iteration, var innerState] = state;
    set innerState = next innerState;
    if innerState == () then (
      if iteration < iterations then (
        set state.[0] = iteration + 1;
        set state.[1] = init;
        return state;
      ) else (
        return ();
      )
    )
    set state.[1] = innerState;
    state
  );
  return {
    init: [1, init],
    current: \[_, i]\ current i,
    next: repeatNext,
  };
);

list = iterRange 0 10000000
  | iterMap (\x\ 0 - x)
  | iterRepeat 2
  | iterStep 3000000
  | iterToList;

println list;
assert (len list == 7);
assert (list.[(len list) - 1] == -8000000);
