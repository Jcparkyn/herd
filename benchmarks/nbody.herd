
PI = Math.PI;
SOLAR_MASS = 4 * PI * PI;
DAYS_PER_YEAR = 365.24;

jupiter = \\ {
  x: 4.84143144246472090e+00,
  y: -1.16032004402742839e+00,
  z: -1.03622044471123109e-01,
  vx: 1.66007664274403694e-03 * DAYS_PER_YEAR,
  vy: 7.69901118419740425e-03 * DAYS_PER_YEAR,
  vz: -6.90460016972063023e-05 * DAYS_PER_YEAR,
  mass: 9.54791938424326609e-04 * SOLAR_MASS,
};

saturn = \\ {
  x: 8.34336671824457987e+00,
  y: 4.12479856412430479e+00,
  z: -4.03523417114321381e-01,
  vx: -2.76742510726862411e-03 * DAYS_PER_YEAR,
  vy: 4.99852801234917238e-03 * DAYS_PER_YEAR,
  vz: 2.30417297573763929e-05 * DAYS_PER_YEAR,
  mass: 2.85885980666130812e-04 * SOLAR_MASS,
};

uranus = \\ {
  x: 1.28943695621391310e+01,
  y: -1.51111514016986312e+01,
  z: -2.23307578892655734e-01,
  vx: 2.96460137564761618e-03 * DAYS_PER_YEAR,
  vy: 2.37847173959480950e-03 * DAYS_PER_YEAR,
  vz: -2.96589568540237556e-05 * DAYS_PER_YEAR,
  mass: 4.36624404335156298e-05 * SOLAR_MASS,
};

neptune = \\ {
  x: 1.53796971148509165e+01,
  y: -2.59193146099879641e+01,
  z: 1.79258772950371181e-01,
  vx: 2.68067772490389322e-03 * DAYS_PER_YEAR,
  vy: 1.62824170038242295e-03 * DAYS_PER_YEAR,
  vz: -9.51592254519715870e-05 * DAYS_PER_YEAR,
  mass: 5.15138902046611451e-05 * SOLAR_MASS,
};

sun = \\ {
  x: 0.0,
  y: 0.0,
  z: 0.0,
  vx: 0.0,
  vy: 0.0,
  vz: 0.0,
  mass: SOLAR_MASS,
};

offsetMomentum = \var bodies\ (
  var px = 0;
  var py = 0;
  var pz = 0;
  for body in bodies do (
    mass = body.mass;
    set px = px + (body.vx * mass);
    set py = py + (body.vy * mass);
    set pz = pz + (body.vz * mass);
  )
  set bodies.[0].vx = (0 - px) / SOLAR_MASS;
  set bodies.[0].vy = (0 - py) / SOLAR_MASS;
  set bodies.[0].vz = (0 - pz) / SOLAR_MASS;
  bodies
);

advance = \var bodies dt\ (
  for i in range 0 (len bodies) do (
    bodyi = bodies.[i];
    var vxi = bodyi.vx;
    var vyi = bodyi.vy;
    var vzi = bodyi.vz;
    for j in range (i + 1) (len bodies) do (
      bodyj = bodies.[j];
      dx = bodyi.x - bodyj.x;
      dy = bodyi.y - bodyj.y;
      dz = bodyi.z - bodyj.z;

      d2 = dx * dx + dy * dy + dz * dz;
      mag = dt / (d2 * (Math.sqrt d2));

      massj = bodyj.mass;
      set vxi = vxi - (dx * massj * mag);
      set vyi = vyi - (dy * massj * mag);
      set vzi = vzi - (dz * massj * mag);

      massi = bodyi.mass;
      set bodies.[j].vx = bodyj.vx + (dx * massi * mag);
      set bodies.[j].vy = bodyj.vy + (dy * massi * mag);
      set bodies.[j].vz = bodyj.vz + (dz * massi * mag);
    )
    set bodies.[i].vx = vxi;
    set bodies.[i].vy = vyi;
    set bodies.[i].vz = vzi;

    set bodies.[i].x = bodyi.x + (dt * vxi);
    set bodies.[i].y = bodyi.y + (dt * vyi);
    set bodies.[i].z = bodyi.z + (dt * vzi);
  )
  bodies
);

energy = \bodies\ (
  var e = 0;
  for i in range 0 (len bodies) do (
    bodyi = bodies.[i];
    set e = e + (0.5 * bodyi.mass * (bodyi.vx * bodyi.vx + bodyi.vy * bodyi.vy + bodyi.vz * bodyi.vz));
    for j in range (i + 1) (len bodies) do (
      bodyj = bodies.[j];
      dx = bodyi.x - bodyj.x;
      dy = bodyi.y - bodyj.y;
      dz = bodyi.z - bodyj.z;

      distance = Math.sqrt (dx * dx + dy * dy + dz * dz);
      set e = e - ((bodyi.mass * bodyj.mass) / distance);
    )
  )
  e
);

main = \\ (
  n = switch System.args on {
    [] => 500000,
    [n] => Math.parseFloat n,
  };

  var bodies = [sun(), jupiter(), saturn(), uranus(), neptune()];

  set bodies |= offsetMomentum;
  println (energy bodies);
  for i in range 0 n do (
    set bodies |= advance 0.01;
  )
  println (energy bodies);
);

main ();